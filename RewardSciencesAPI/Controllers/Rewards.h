//
//  Rewards.h
//  RewardSciencesAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/13/2016
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface Rewards : BaseController

/**
* Completion block definition for asynchronous call to Redeem */
typedef void (^CompletedPostRedeem)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Redeem a reward.
* @param    rewardId    Required parameter: The ID of the reward to be redeemed.
* @param    userId    Required parameter: The ID of the user who is redeeming the reward.
*/
- (void) redeemAsyncWithRewardId:(int) rewardId
                userId:(int) userId
                completionBlock:(CompletedPostRedeem) onCompleted;

/**
* Completion block definition for asynchronous call to Show */
typedef void (^CompletedGetShow)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Show a reward's details.
* @param    rewardId    Required parameter: The ID of the reward to be retrieved.
*/
- (void) showAsyncWithRewardId:(int) rewardId
                completionBlock:(CompletedGetShow) onCompleted;

/**
* Completion block definition for asynchronous call to Bid */
typedef void (^CompletedPostBid)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Bid on a reward auction.
* @param    rewardId    Required parameter: The ID of the reward auction to be bid on.
* @param    userId    Required parameter: The ID of the user who is bidding on the reward auction.
* @param    amount    Required parameter: Can be either 'max' (when max bidding) or the number of points the user wants to bid.
*/
- (void) bidAsyncWithRewardId:(int) rewardId
                userId:(int) userId
                amount:(NSString*) amount
                completionBlock:(CompletedPostBid) onCompleted;

/**
* Completion block definition for asynchronous call to List */
typedef void (^CompletedGetList)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* List all the available rewards.
* @param    categoryId    Optional parameter: The id of the category to filter rewards by
* @param    limit    Optional parameter: The number of rewards you want to be retrieved.
* @param    offset    Optional parameter: The number of rewards you want to skip before starting the retrieval.
*/
- (void) listAsyncWithCategoryId:(NSNumber*) categoryId
                limit:(NSNumber*) limit
                offset:(NSNumber*) offset
                completionBlock:(CompletedGetList) onCompleted;

@end